<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="EmployeeMapper">
	
	<sql id="employeeColumns">
		ID,	
		EMP_CODE,	
		EMP_NAME,
		EMP_GENDER,
		EMP_DEPARTMENT_ID,
		EMP_DEPARTMENT_NAME,
		EMP_EMAIL,
		EMP_PHONE,
		EMP_POSITION_CODE,
		EMP_GRADE_ID,
		EMP_GRADE_NAME,
		ATTACH_KPI_MODEL,
		EMP_REMARK,
		ENABLED,
		CREATE_TIME,
		CREATE_USER,
		LAST_UPDATE_TIME,
		LAST_UPDATE_USER
	</sql>
	
	<!-- 新增-->
	<insert id="save" parameterType="pd">
		insert into BD_EMPLOYEE(
			EMP_CODE,	
			EMP_NAME,
			EMP_GENDER,
			<if test="LEADER_EMPCODE!=null and LEADER_EMPCODE!=''">LEADER_EMPCODE,</if>
			<if test="LEADER_EMPNAME!=null and LEADER_EMPNAME!=''">LEADER_EMPNAME,</if>
			<if test="IS_SHOW_DEPT_WORK!=null and IS_SHOW_DEPT_WORK!=''">IS_SHOW_DEPT_WORK,</if>
			EMP_DEPARTMENT_ID,
			EMP_DEPARTMENT_NAME,
			EMP_EMAIL,
			EMP_PHONE,
			EMP_POSITION_CODE,
			EMP_GRADE_ID,
			EMP_GRADE_NAME,
			ATTACH_KPI_MODEL,
			EMP_REMARK,
			ENABLED,
			CREATE_TIME,
			CREATE_USER
		) values (
			#{EMP_CODE},	
			#{EMP_NAME},		
			#{EMP_GENDER},
			<if test="LEADER_EMPCODE!=null and LEADER_EMPCODE!=''">#{LEADER_EMPCODE},</if>
			<if test="LEADER_EMPNAME!=null and LEADER_EMPNAME!=''">#{LEADER_EMPNAME},</if>
			<if test="IS_SHOW_DEPT_WORK!=null and IS_SHOW_DEPT_WORK!=''">#{IS_SHOW_DEPT_WORK},</if>
			#{EMP_DEPARTMENT_ID},
			#{EMP_DEPARTMENT_NAME},
			#{EMP_EMAIL},
			#{EMP_PHONE},
			#{EMP_POSITION_CODE},
			#{EMP_GRADE_ID},
			#{EMP_GRADE_NAME},
			#{ATTACH_KPI_MODEL},
			#{EMP_REMARK},
			#{ENABLED},
			#{CREATE_TIME},
			#{CREATE_USER}
		)
	</insert>
	
	<!-- 删除-->
	<delete id="delete" parameterType="pd">
		delete from BD_EMPLOYEE
		where 
			ID = #{ID}
	</delete>
	
	<!-- 修改 -->
	<update id="edit" parameterType="pd">
		update BD_EMPLOYEE
			set 
				EMP_CODE = #{EMP_CODE}, 	
				EMP_NAME = #{EMP_NAME},
				EMP_GENDER = #{EMP_GENDER},
				<if test="LEADER_EMPCODE!=null and LEADER_EMPCODE!=''">LEADER_EMPCODE = #{LEADER_EMPCODE},</if>
				<if test="LEADER_EMPNAME!=null and LEADER_EMPNAME!=''">LEADER_EMPNAME = #{LEADER_EMPNAME},</if>
				<if test="IS_SHOW_DEPT_WORK!=null and IS_SHOW_DEPT_WORK!='' ">
					IS_SHOW_DEPT_WORK = #{IS_SHOW_DEPT_WORK},
				</if>
				EMP_DEPARTMENT_ID = #{EMP_DEPARTMENT_ID},
				EMP_DEPARTMENT_NAME = #{EMP_DEPARTMENT_NAME},
				EMP_POSITION_CODE = #{EMP_POSITION_CODE},
				EMP_EMAIL = #{EMP_EMAIL},
				EMP_PHONE = #{EMP_PHONE},
				EMP_PHONE_2 = #{EMP_PHONE_2},
				EMP_BANK_NAME = #{EMP_BANK_NAME},
				EMP_BANK_NO = #{EMP_BANK_NO},
				EMP_GRADE_ID = #{EMP_GRADE_ID},
				EMP_GRADE_NAME = #{EMP_GRADE_NAME},
				ATTACH_KPI_MODEL = #{ATTACH_KPI_MODEL},
				EMP_REMARK = #{EMP_REMARK},
				ENABLED = #{ENABLED},
				LAST_UPDATE_TIME = #{LAST_UPDATE_TIME},
				LAST_UPDATE_USER = #{LAST_UPDATE_USER} 
			where 
				ID = #{ID}
	</update>
	
	<!-- 根据员工编码修改员工信息 -->
	<update id="updateEmpInfoByEmpcode" parameterType="pd">
		update BD_EMPLOYEE
			set 
				EMP_GENDER = #{EMP_GENDER},
				EMP_DEPARTMENT_ID = #{EMP_DEPARTMENT_ID},
				EMP_DEPARTMENT_NAME = #{EMP_DEPARTMENT_NAME},
				EMP_EMAIL = #{EMP_EMAIL},
				EMP_PHONE = #{EMP_PHONE},
				EMP_GRADE_ID = #{EMP_GRADE_ID},
				EMP_GRADE_NAME = #{EMP_GRADE_NAME},
				EMP_REMARK = #{EMP_REMARK},
				ENABLED = #{ENABLED},
				LAST_UPDATE_TIME = #{LAST_UPDATE_TIME},
				LAST_UPDATE_USER = #{LAST_UPDATE_USER} 
			where 
				EMP_CODE = #{EMP_CODE}
	</update>
	
	<!-- 修改员工中的岗位名称及考核模板 -->
	<update id="updatePositionNameInEmp" parameterType="pd">
		update bd_employee 
		set EMP_GRADE_NAME = #{gradeName},
			ATTACH_KPI_MODEL = #{attachKpiModel}
			<if test="attachYearKpiModel != null and attachYearKpiModel != ''">
				, ATTACH_YEAR_KPI_MODEL_ID = #{attachYearKpiModel}
			</if>
			
		where EMP_GRADE_ID = #{id}
	</update>
	
	<!-- 查询年度考核关联的员工列表 -->
	<select id="findEmpListByYearKpiModelId" parameterType="pd" resultType="pd">
		select ID, EMP_CODE, ATTACH_YEAR_KPI_MODEL_ID
		from bd_employee
		where ATTACH_YEAR_KPI_MODEL_ID = #{yearKpiModelId}
	</select>
	
	<!-- 更新员工关联的年度考核模板 -->
	<update id="updateYearKpiModelInEmp" parameterType="pd">
		update bd_employee 
		set ATTACH_YEAR_KPI_MODEL_ID = #{yearKpiModelId}
		where EMP_CODE in (
			<foreach collection="empCodeList" separator="," item="relateEmp">
				#{relateEmp}
			</foreach>
		)
	</update>
	
	<!-- 通过ID获取数据 -->
	<select id="findById" parameterType="pd" resultType="pd">
		select 
			ID,	EMP_CODE, EMP_NAME, EMP_GENDER, LEADER_EMPCODE, LEADER_EMPNAME,
		IS_SHOW_DEPT_WORK, EMP_DEPARTMENT_ID, EMP_DEPARTMENT_NAME, EMP_POSITION_CODE, 
		EMP_EMAIL, EMP_PHONE, EMP_PHONE_2, EMP_BANK_NAME, EMP_BANK_NO,
		EMP_GRADE_ID, EMP_GRADE_NAME,
		ATTACH_KPI_MODEL, ATTACH_YEAR_KPI_MODEL_ID, EMP_REMARK, ENABLED,
		CREATE_TIME, CREATE_USER, LAST_UPDATE_TIME, LAST_UPDATE_USER
		, IFNULL((select NAME from bd_kpi_model where ID = e.ATTACH_KPI_MODEL), '') ATTACH_KPI_MODEL_NAME
		, IFNULL((select NAME from bd_kpi_model where ID = e.ATTACH_YEAR_KPI_MODEL_ID), '') ATTACH_YEAR_KPI_MODEL_NAME
		from 
			BD_EMPLOYEE e
		where 
			ID = #{ID}
	</select>
	
	<!-- 通过ID获取sys_user的数据 -->
	<select id="findSystemUserById" parameterType="pd" resultType="pd">
		select 
			user.USERNAME USERNAME
		from 
			BD_EMPLOYEE emp,SYS_USER user
		where 
			emp.ID = #{ID}
		AND emp.EMP_NAME=user.USERNAME
	</select>
	
	
	<!-- 通过Code获取数据 -->
	<select id="findByCode" parameterType="pd" resultType="pd">
		select 
			ID,	EMP_CODE, EMP_NAME, EMP_GENDER, LEADER_EMPCODE, LEADER_EMPNAME,
		IS_SHOW_DEPT_WORK, EMP_DEPARTMENT_ID, EMP_DEPARTMENT_NAME, EMP_POSITION_CODE,
		EMP_EMAIL, EMP_PHONE, EMP_PHONE_2, EMP_BANK_NAME, EMP_BANK_NO, EMP_GRADE_ID, EMP_GRADE_NAME, 
		ATTACH_KPI_MODEL, EMP_REMARK, ENABLED, 
		CREATE_TIME, CREATE_USER, LAST_UPDATE_TIME, LAST_UPDATE_USER
		from 
			BD_EMPLOYEE
		where 
			EMP_CODE = #{EMP_CODE}
	</select>
	
	<!-- 列表(全部) -->
	<select id="listAll" parameterType="pd" resultType="pd">
		select
			<include refid="employeeColumns"/>
		from 
			BD_EMPLOYEE
		where ENABLED = 1 
		<!-- 员工编码检索 -->
		<if test="null != EMP_CODE and '' != EMP_CODE">
			and EMP_CODE like "%"#{EMP_CODE}"%" 
			<!-- and CONCAT('%','${EMP_CODE}','%' )  -->
		</if>
		<!-- 员工姓名检索 -->
		<if test="EMP_NAME != null and EMP_NAME != ''">
			and EMP_NAME like "%"#{EMP_NAME}"%" 
		</if>
	</select>
	
	<!-- 列表(全部) -->
	<select id="listAllLabour" resultType="pd">
		select
			<include refid="employeeColumns"/>
		from 
			BD_EMPLOYEE
		where 1=1
		<!-- <if test="null != labourList and '' != labourList">
			and ID not in 
			<foreach collection="labourList" item="labourList" index="index" open="(" close=")" separator=",">
	            #{labourList}
	        </foreach>
		</if> -->
		<!-- 员工编码检索 -->
		<if test="null != EMP_CODE and '' != EMP_CODE">
			and EMP_CODE like "%"#{EMP_CODE}"%" 
		</if>
		<!-- 员工姓名检索 -->
		<if test="EMP_NAME != null and EMP_NAME != ''">
			and EMP_NAME like "%"#{EMP_NAME}"%" 
		</if>
		<!-- 部门检索 -->
		<if test="EMP_DEPARTMENT_ID != null and EMP_DEPARTMENT_ID != ''">
			and EMP_DEPARTMENT_ID = #{EMP_DEPARTMENT_ID} 
		</if>
	</select>
	
	<select id="listPage" parameterType="page" resultType="pd">
		select
			e.*
		from bd_employee e
		where 1 = 1
			<if test="pd.EMP_CODE != null and pd.EMP_CODE != '' "> 
	 			and EMP_CODE like "%"#{pd.EMP_CODE}"%"
			</if>
			<if test="pd.EMP_NAME != null and pd.EMP_NAME != ''"> 
		 		and EMP_NAME like "%"#{pd.EMP_NAME}"%" 
			</if>
			<if test="pd.ENABLED != null and pd.ENABLED != ''"> 
		 		and ENABLED like "%"#{pd.ENABLED}"%" 
			</if>
			<if test="pd.deptId != null and pd.deptId != ''"> 
		 		and EMP_DEPARTMENT_ID = #{pd.deptId} 
			</if>
			<if test="pd.empGradeName != null and pd.empGradeName != ''">
				and EMP_GRADE_NAME like concat('%', #{pd.empGradeName},'%')
			</if>
			<if test="pd.ids != null and pd.ids != ''"> 
		 		and EMP_DEPARTMENT_ID in
		 		<foreach item="item" index="index" collection="pd.ids" open="(" separator="," close=")">
		 			${item}
		 		</foreach>
			</if>
			<choose>
				<when test="pd.sortKey != null and pd.sortKey != ''">
					order by ${pd.sortKey} ${pd.sortMethod}
				</when>
				<otherwise>
					order by EMP_CODE asc
				</otherwise>
			</choose>
	</select>
	
	<!-- 列表(全部) -->
	<select id="listAllByIds" parameterType="String" resultType="pd">
		select
			<include refid="employeeColumns"/>
		from 
			BD_EMPLOYEE
			where id not in 
		<foreach item="item" index="index" collection="array" open="(" separator="," close=")">
	    	#{item}
	    </foreach>
	</select>
	
	<!-- 通过部门id查找员工 -->
	<select id="findEmpByDept" parameterType="String" resultType="pd">
		select 
			<include refid="employeeColumns"/>
		from 
			bd_employee 
		where EMP_DEPARTMENT_ID = #{deptId}
		and ENABLED = 1
		
		order by EMP_NAME
	</select>
	
	<select id="findEmpByDeptCode" parameterType="String" resultType="pd">
		SELECT
			e.*
		FROM
			bd_employee e,
			bd_department p
		WHERE
			e.EMP_DEPARTMENT_ID = p.ID
		AND p.DEPT_CODE = #{code}
	</select>
	

	<!-- 批量删除 -->
	<delete id="deleteAll" parameterType="String">
		delete from BD_EMPLOYEE
		where 
			ID in
		<foreach item="item" index="index" collection="array" open="(" separator="," close=")">
        	#{item}
		</foreach>
	</delete>
	
	<!-- 查找没有登录用户的员工编号 -->
	<select id="findEmpNotInUser" resultType="pd">
		SELECT
			e.EMP_CODE
		FROM
			bd_employee e
		WHERE
			NOT EXISTS (
				SELECT
					1
				FROM
					sys_user u
				WHERE
					e.EMP_CODE = u.number
			)
		<if test="ENABLED != null and ENABLED != ''">
			and e.ENABLED = #{ENABLED}
		</if>
	</select>
	
	<!-- 查询岗位下是否有员工 -->
	<select id="findEmpByGradeId" parameterType="pd" resultType="Integer">
		select count(ID) as Num 
		from bd_employee e 
		where EMP_GRADE_ID = #{gradeId}
		and ENABLED = 1
	</select>
	
	<select id="countEmp" resultType="Integer" parameterType="page">
		select count(ID) from bd_employee e where 1 = 1
			<if test="pd.EMP_CODE != null and pd.EMP_CODE != '' "> 
	 			and EMP_CODE like "%"#{pd.EMP_CODE}"%"
			</if>
			<if test="pd.EMP_NAME != null and pd.EMP_NAME != ''"> 
		 		and EMP_NAME like "%"#{pd.EMP_NAME}"%" 
			</if>
			<if test="pd.ENABLED != null and pd.ENABLED != ''"> 
		 		and ENABLED like "%"#{pd.ENABLED}"%" 
			</if>
			<if test="pd.deptId != null and pd.deptId != ''"> 
		 		and EMP_DEPARTMENT_ID = #{pd.deptId} 
			</if>
	</select>
	
	<!-- 根据员工编码查询员工所在部门 -->
	<select id="findDeptByEmpCode" parameterType="String" resultType="pd">
		select d.ID, d.DEPT_CODE, d.DEPT_NAME
		from bd_employee e 
		left join bd_department d on e.EMP_DEPARTMENT_ID=d.ID
		where e.EMP_CODE=#{empCode}
	</select>
	
	<!-- 查询部门下的员工列表 -->
	<select id="findEmpByDeptIds" parameterType="List" resultType="pd">
		select e.ID, e.EMP_CODE, e.EMP_NAME, e.EMP_DEPARTMENT_ID
		from bd_employee e
		left join bd_department dep on dep.ID = e.EMP_DEPARTMENT_ID
		where e.ENABLED=1 
			and e.EMP_DEPARTMENT_ID in
		<foreach collection="list" item="dept" open="(" close=")" separator=",">
			#{dept}
		</foreach>
		order by dep.ORDER_NUM, e.EMP_NAME
	</select>
	<!-- 根据编码批量查询用户 -->
	<select id="getAllByCodes"  parameterType="String" resultType = "pd">
		select ID,EMP_CODE,EMP_NAME,EMP_DEPARTMENT_ID,EMP_DEPARTMENT_NAME,EMP_GRADE_ID,EMP_GRADE_NAME
	  	from 
	  		bd_employee
	  	where 
	  		ENABLED ='1' and
	  		EMP_CODE IN 
			<foreach collection="array" item="ArrayDATA_CODES" open="(" separator="," close=")" >
				#{ArrayDATA_CODES}
			</foreach>
	</select>
	
	<!-- 通过员工ID获取员工档案 -->
	<select id="findRecord" parameterType="pd" resultType="pd">
		select 
			*
		from 
			bd_emp_record
		where 
			EMP_ID = #{EMP_ID}
	</select>
	
	<!-- 根据员工id查询员工信息和档案 -->
	<select id="findEmpAndRecord" parameterType="pd" resultType="pd">
		select emp.ID EMP_ID, emp.EMP_CODE, emp.EMP_NAME, emp.EMP_GENDER, emp.EMP_EMAIL, emp.EMP_PHONE,
			emp.EMP_PHONE_2, emp.EMP_BANK_NAME, emp.EMP_BANK_NO,
			r.ID RECORD_ID, r.ADDRESS, r.BIRTHDAY, r.SCHOOL, r.GRADUATE_TIME, r.MAJOR, r.DEGREE
		from bd_employee emp
		left join bd_emp_record r on r.EMP_ID = emp.ID
		where emp.ID = #{EMP_ID}
	</select>
	
	<!-- 通过ID获取员工档案 -->
	<select id="findRecordId" parameterType="pd" resultType="pd">
		select 
			*
		from 
			bd_emp_record
		where 
			ID = #{ID}
	</select>

	<!-- 通过员工ID获取员工档案和信息 -->
	<select id="findRecordlistPage" resultType="pd" parameterType="page">
		select * from
		(
			select ID, EMP_NAME, EMP_CODE, EMP_GENDER, EMP_DEPARTMENT_ID, EMP_DEPARTMENT_NAME
			from bd_employee 
			where 1=1 and ENABLED=1
			<if test="pd.deptIdList!=null ">
			    and ( EMP_CODE = #{pd.allEmpCode}
					 or	EMP_DEPARTMENT_ID IN 
						<foreach collection="pd.deptIdList" item="dept" open="(" separator="," close=")" >
							${dept}
						</foreach>
				)
			</if>
			<if test="pd.selfEmpCode!=null ">
				and EMP_CODE = #{pd.selfEmpCode}
			</if>
			<if test="null != pd.name and '' != pd.name">
				and EMP_NAME like "%"#{pd.name}"%"
			</if>
			<if test="null != pd.empCode and '' != pd.empCode">
				and EMP_CODE = #{pd.empCode}
			</if>
			<if test="null != pd.deptId and '' != pd.deptId">
				and EMP_DEPARTMENT_ID = #{pd.deptId}
			</if>
			<if test="null != pd.deptmentname and '' != pd.deptmentname">
				and EMP_DEPARTMENT_NAME like "%"#{pd.deptmentname}"%"
			</if>
		) emp
		left join (
			select ID RECORD_ID, EMP_ID, SCHOOL, GRADUATE_TIME, GRADUATE_TIME_TEXT 
			from bd_emp_record
		) rec on rec.EMP_ID=emp.ID
		where 1=1
		<if test="null != pd.school and '' != pd.school">
			and rec.SCHOOL like "%"#{pd.school}"%"
		</if>
		<if test="null != pd.hasRecord and '' != pd.hasRecord">
			<choose>
				<when test="'Y'.toString() == pd.hasRecord">
					and rec.RECORD_ID is not null
				</when>
				<otherwise>
					and rec.RECORD_ID is null
				</otherwise>
			</choose>
		</if>
		order by emp.EMP_DEPARTMENT_ID, emp.EMP_NAME
	</select>
	
	<!-- 根据部门地域查询员工档案信息 -->
	<select id="findRecordByDeptArea" parameterType="pd" resultType="pd">
		select e.ID, e.EMP_CODE, e.EMP_NAME, r.ADDRESS 
			, DATE_FORMAT(r.BIRTHDAY, '%Y/%c/%e') BIRTHDAY, r.SCHOOL, r.MAJOR
			, DATE_FORMAT(r.GRADUATE_TIME, '%Y/%c/%e') GRADUATE_TIME, r.DEGREE
		from bd_emp_record r
		left join bd_employee e on e.ID = r.EMP_ID
		where e.ENABLED = 1 
			and e.EMP_DEPARTMENT_ID in (select ID from bd_department where AREA = #{area} and IS_DELETE=0)
		order by e.EMP_DEPARTMENT_NAME, e.EMP_NAME
	</select>
	
	<!-- 根据部门地域查询员工的工作经历信息 -->
	<select id="findRecordExpByDeptArea" parameterType="pd" resultType="pd">
		select exp.EMP_ID, exp.EXP, exp.POSITION
			, e.EMP_CODE, e.EMP_NAME
		from bd_emp_record_exp exp
		left join bd_employee e on e.ID = exp.EMP_ID
		where e.ENABLED = 1 
			and e.EMP_DEPARTMENT_ID in (select ID from bd_department where AREA = #{area} and IS_DELETE=0)
		order by e.EMP_DEPARTMENT_NAME, e.EMP_NAME
	</select>
	
	<!-- 通过员工ID获取员工工作经历-->
	<select id="findExp" parameterType="pd" resultType="pd">
		select 
			*
		from 
			bd_emp_record_exp
		where 
			EMP_ID = #{EMP_ID}
	</select>
	
	
	<!-- 新增员工档案基础信息-->
	<insert id="saveRecord" parameterType="pd">
		insert into bd_emp_record(
			EMP_ID,
			NAME,
			ADDRESS,
			BIRTHDAY,
			SCHOOL,
			GRADUATE_TIME,
			GRADUATE_TIME_TEXT,
			MAJOR,
			DEGREE,
			UPDATE_USER,
			UPDATE_TIME
		) values (
			#{EMP_ID},
			#{NAME},
			#{ADDRESS},
			#{BIRTHDAY},
			#{SCHOOL},
			#{GRADUATE_TIME},
			#{GRADUATE_TIME_TEXT},
			#{MAJOR},
			#{DEGREE},
			#{UPDATE_USER},
			now()
		)
	</insert>
	
	<!--修改员工档案基础信息 -->
	<update id="editRecord" parameterType="pd">
		update bd_emp_record
			set 
				NAME = #{NAME},
				ADDRESS = #{ADDRESS},
				BIRTHDAY = #{BIRTHDAY},
				SCHOOL = #{SCHOOL},
				GRADUATE_TIME = #{GRADUATE_TIME},
				GRADUATE_TIME_TEXT = #{GRADUATE_TIME_TEXT},
				MAJOR = #{MAJOR},
				DEGREE = #{DEGREE},
				UPDATE_USER = #{UPDATE_USER},
				UPDATE_TIME = now()
			where 
				EMP_ID = #{EMP_ID}
	</update>
	
	<!-- 新增员工工作经历-->
	<insert id="saveExp" parameterType="pd">
		insert into bd_emp_record_exp(
			EMP_ID,
			EXP,
			POSITION
		) values (
			#{EMP_ID},
			#{EXP},
			#{POSITION}
		)
	</insert>
	
	
	<!--批量新增员工档案工作经历-->
    <insert id="batchAdd" parameterType="java.util.List" flushCache="false">
        INSERT INTO bd_emp_record_exp (
            EMP_ID,
			EXP,
			POSITION
        )
        VALUES
        <foreach item="item" index="index" collection="list" separator=",">
            (#{item.EMP_ID},
            #{item.EXP},
            #{item.POSITION}
            )
        </foreach>
    </insert>

    <!--批量更新员工档案工作经历-->
    <update id="batchUpdate" parameterType="pd">
        UPDATE bd_emp_record_exp
        SET
            EXP = #{EXP},
            POSITION = #{POSITION}
        WHERE
            ID = ${ID};
    </update>

	<!--批量删除员工档案工作经历-->
	<delete id="batchDelete" parameterType="pd">
		delete from bd_emp_record_exp
		WHERE
          1 = 1
        AND ID NOT IN (
            <foreach item="item" index="index" collection="update_ids" separator=",">
                ${item}
            </foreach>
        )
        AND EMP_ID = #{EMP_ID}
	</delete>
	
	<!-- 删除员工档案工作经历- -->
	<delete id="deleteAllExp" parameterType="pd">
		delete from bd_emp_record_exp
		where 
			EMP_ID = #{EMP_ID}
	</delete>

	<select id="findCodeByName" resultType="String">
		select EMP_CODE from bd_employee where EMP_NAME = #{name} and ENABLED = 1
	</select>
	
	<select id="findEmpByPosition" resultType="pd">
		SELECT
			EMP_CODE,
			EMP_NAME
		FROM
			bd_employee
		WHERE
			ENABLED = 1
		AND EMP_GRADE_ID = #{positionId}
		order by EMP_NAME
	</select>
	<!-- 通过部门id查找员工，形成组织人员树查到的人员信息 -->
	<select id="findEmpByDeptPd" parameterType="pd" resultType="pd">
		select 
			ID,
			EMP_CODE DEPT_CODE,
			EMP_NAME DEPT_NAME,
			#{ID} PARENT_ID
		from 
			bd_employee 
		where EMP_DEPARTMENT_ID = #{ID}
		and ENABLED = 1
	</select>
	
	<!-- 根据员工编码查询岗位信息 -->
	<select id="findPositionByEmpCode" parameterType="String" resultType="pd">
		select emp.EMP_CODE, emp.EMP_NAME, emp.IS_SHOW_DEPT_WORK, emp.EMP_GRADE_ID, 
			pos.GRADE_CODE, pos.GRADE_NAME, pos.JOB_RANK
		from bd_employee emp
		left join bd_position_level pos on pos.ID=emp.EMP_GRADE_ID and emp.ENABLED=1 and pos.ISDEL=0
		where emp.EMP_CODE = #{empCode}
	</select>
	
	<!-- 查询员工信息，包含部门和岗位 -->
	<select id="findAllEmpInfo" parameterType="pd" resultType="pd">
		select emp.ID, emp.EMP_CODE, emp.EMP_NAME, emp.EMP_GENDER, emp.EMP_DEPARTMENT_ID, emp.EMP_DEPARTMENT_NAME,
		emp.EMP_EMAIL, emp.EMP_PHONE, emp.EMP_GRADE_ID, emp.EMP_GRADE_NAME, emp.ATTACH_KPI_MODEL, emp.EMP_REMARK,
		emp.ENABLED, emp.CREATE_TIME, emp.CREATE_USER, dep.DEPT_SIGN , pos.GRADE_CODE
		from bd_employee emp 
		left join bd_department dep on dep.ID = emp.EMP_DEPARTMENT_ID and dep.IS_DELETE = 0
		left join bd_position_level pos on pos.ID = emp.EMP_GRADE_ID and pos.ISDEL = 0
		where 1=1 
		<if test="null != EMP_CODE and '' != EMP_CODE">
			and emp.EMP_CODE like "%"#{EMP_CODE}"%" 
		</if>
		<if test="EMP_NAME != null and EMP_NAME != ''">
			and emp.EMP_NAME like "%"#{EMP_NAME}"%" 
		</if>
		<if test="ENABLED != null and ENABLED != ''">
			and emp.ENABLED = #{ENABLED}
		</if>
	</select>
	
	<!-- 查询上级岗位的所有员工(岗位最大为1级，最小为15级) -->
	<select id="findSuperiorEmp" parameterType="pd" resultType="pd">
		select emp.ID, emp.EMP_CODE, emp.EMP_NAME, emp.EMP_GRADE_ID, emp.EMP_GRADE_NAME, pos.JOB_RANK
		from bd_employee emp
		left join bd_position_level pos on (pos.ID=emp.EMP_GRADE_ID and pos.ISDEL=0)
		where emp.ENABLED=1 
		<if test="empPositionLevel > 1">
			and emp.EMP_CODE != #{empCode}
		</if>
		<if test=" null != empPositionLevel and '' != empPositionLevel ">
			and pos.JOB_RANK 
			<choose>
				<when test=" null != operator and '' != operator ">
					${operator}
				</when>
				<otherwise>
					<![CDATA[ < ]]>
				</otherwise>
			</choose>
			#{empPositionLevel}
		</if>
		<if test="null != deptId and '' != deptId ">
			and (
				emp.EMP_DEPARTMENT_ID = #{deptId} or emp.EMP_CODE=(
				select EMP_CODE from bd_employee where ID = (select DEPT_LEADER_ID from bd_department where ID=#{deptId})
			))
		</if>
		order by pos.JOB_RANK, emp.EMP_DEPARTMENT_ID, emp.EMP_CODE
	</select>
	
	<!-- 更新员工表中‘服务支持’字段 -->
	<update id="updateEmpSupportService" parameterType="pd">
		update bd_employee 
		set IS_SUPPORT_SERVICE = #{isSupportService}
		where EMP_CODE in 
		<foreach collection="empCodeArr" item="empCode" open="(" separator="," close=")">
			#{empCode}
		</foreach>
	</update>
	
	<!-- 更新员工表中‘配置维护’字段 -->
	<update id="updateSaveConfiguration" parameterType="pd">
		update bd_employee 
		set IS_CHANGE_TRAINING = #{isChangeTraining}
		where EMP_CODE in 
		<foreach collection="empCodeArr" item="empCode" open="(" separator="," close=")">
			#{empCode}
		</foreach>
	</update>
	
	<!-- 通过部门id查找所有员工，按照姓名的中文排序 -->
	<select id="findAllEmpByDept" parameterType="pd" resultType="pd">
		select 
			<include refid="employeeColumns"/>
		from 
			bd_employee 
		where EMP_DEPARTMENT_ID = #{deptId}
		and ENABLED = 1
		<if test="isService==1 ">
			and IS_SUPPORT_SERVICE = 'Y'
		</if>
		order by convert(EMP_NAME using gbk) collate gbk_chinese_ci
	</select>
	
	<!-- 查询员工信息 -->
	<select id="findEmployeeByNameAndDept" parameterType="pd" resultType="pd">
		select * from bd_employee 
		where EMP_NAME = #{name} and EMP_DEPARTMENT_NAME = #{deptName} and ENABLED = 1
	</select>

	<!-- 更新用户中的员工名称 -->
	<update id="updateEmpInfoInUser" parameterType="pd">
		update sys_user 
		set 
			<if test="ENABLED!=null and ENABLED!=''">
				ENABLED = #{ENABLED},
			</if>
			NAME = #{EMP_NAME},
			DEPT_ID = #{EMP_DEPARTMENT_ID},
			DEPT_NAME = #{EMP_DEPARTMENT_NAME},
			EMAIL = #{EMP_EMAIL},
			PHONE = #{EMP_PHONE}
		where NUMBER = #{EMP_CODE}
	</update>
	
	<!-- 根据员工编码查询员工和岗位信息 -->
	<select id="findEmpAndGradeInfoByEmpcode" parameterType="String" resultType="pd">
		select e.EMP_CODE, e.EMP_NAME, e.EMP_GRADE_ID, p.GRADE_CODE, p.GRADE_NAME, p.JOB_RANK,
		e.LEADER_EMPCODE, e.LEADER_EMPNAME
		from bd_employee e 
		left join bd_position_level p on (p.ID = e.EMP_GRADE_ID and p.ISDEL=0)
		where e.EMP_CODE = #{empCode}
	</select>
	
	<!-- 更新员工档案 -->
	<update id="updateRecording" parameterType="pd">
		update bd_emp_record
		<set>
			<if test="status != null and status != ''">
				STATUS = #{status},
			</if>
		</set>
		where ID=#{ID}
	</update>
	
	<!-- 根据员工ID查找所属部门信息 -->
	<select id="findDeptInfoByEmpId" parameterType="pd" resultType="pd">
		select e.EMP_CODE, e.EMP_NAME, e.LEADER_EMPCODE, e.LEADER_EMPNAME,
		d.ID DEPT_ID, d.DEPT_CODE, d.DEPT_NAME, d.DEPT_LEADER_ID, d.DEPT_LEADER_NAME, 
		leader.EMP_CODE DEPT_LEADER_EMP_CODE
		from bd_employee e
		left join bd_department d on d.ID = e.EMP_DEPARTMENT_ID
		left join bd_employee leader on leader.ID = d.DEPT_LEADER_ID
		where e.ID = #{empId}
	</select>
	
	<!-- 根据员工ID，从档案管理页面，更新员工的电话、邮箱、性别信息 -->
	<update id="updateEmpInfoByRecordEmpId" parameterType="pd">
		update bd_employee 
		<set>
			<if test="EMP_GENDER != null and EMP_GENDER != ''">
				EMP_GENDER=#{EMP_GENDER},
			</if>
			<if test="EMP_PHONE != null and EMP_PHONE != ''">
				EMP_PHONE=#{EMP_PHONE},
			</if>
			<if test="EMP_EMAIL != null and EMP_EMAIL != ''">
				EMP_EMAIL=#{EMP_EMAIL},
			</if>
			<if test="EMP_PHONE_2 != null and EMP_PHONE_2 != ''">
				EMP_PHONE_2=#{EMP_PHONE_2},
			</if>
			<if test="EMP_BANK_NAME != null and EMP_BANK_NAME != ''">
				EMP_BANK_NAME=#{EMP_BANK_NAME},
			</if>
			<if test="EMP_BANK_NO != null and EMP_BANK_NO != ''">
				EMP_BANK_NO=#{EMP_BANK_NO},
			</if>
		</set>
		where ID = #{EMP_ID}
	</update>
	
	<!-- 根据员工编号，更新用户的电话、邮箱 -->
	<update id="updateSysuserPhoneAndEmailByEmpCode" parameterType="pd">
		update sys_user 
		<set>
			<if test="EMP_PHONE != null and EMP_PHONE != ''">
				PHONE=#{EMP_PHONE},
			</if>
			<if test="EMP_EMAIL != null and EMP_EMAIL != ''">
				EMAIL=#{EMP_EMAIL},
			</if>
		</set>
		where NUMBER = #{EMP_CODE}
	</update>
	
	<!-- 查询员工是否可以维护 -->
	<select id="findIsChangeByEmpCode" parameterType="pd" resultType="pd">
		select 
			SHOW_PAGE, IS_CHANGE
		from 
			emp_config
		where 
			EMP_CODE = #{empCode} and IS_CHANGE='Y'
			and SHOW_PAGE = #{showPage}
		order by ID desc
	</select>
	
	<!-- 查询员工是否可以维护多个页面 -->
	<select id="findIsChangeByShowpages" parameterType="pd" resultType="pd">
		select 
			SHOW_PAGE, IS_CHANGE
		from 
			emp_config
		where 
			EMP_CODE = #{empCode} and IS_CHANGE='Y'
			and SHOW_PAGE in
			<foreach collection="showPages" item="showpage" open="(" separator="," close=")">
				#{showpage}
			</foreach>
		order by ID desc
	</select>
	
	<!-- 查询员工可以维护所有页面 -->
	<select id="findAllConfigPageByEmpCode" parameterType="pd" resultType="pd">
		select 
			SHOW_PAGE, IS_CHANGE
		from 
			emp_config
		where 
			EMP_CODE = #{empCode} and IS_CHANGE='Y'
			<if test="showPageLike != null and showPageLike != ''">
				and SHOW_PAGE like concat(#{showPageLike}, '%')
			</if>
			order by ID desc
	</select>
	
	
	<!-- 在配置页面展示员工列表 -->
	<select id="unConfigEmplistPage" parameterType="page" resultType="pd">
		select
			e.ID, e.EMP_CODE, e.EMP_NAME, e.EMP_DEPARTMENT_ID, e.EMP_DEPARTMENT_NAME
		from bd_employee e
		where e.ENABLED=1
			and not exists(select c.IS_CHANGE from emp_config c 
				where c.EMP_CODE=e.EMP_CODE and c.SHOW_PAGE='${pd.showPage}' and c.IS_CHANGE='Y'
			)
			<if test="pd.deptId != null and pd.deptId != ''"> 
		 		and e.EMP_DEPARTMENT_ID = #{pd.deptId} 
			</if>
			
			<choose>
				<when test="pd.sortKey != null and pd.sortKey != ''">
					order by ${pd.sortKey} ${pd.sortMethod}
				</when>
				<otherwise>
					order by EMP_CODE asc
				</otherwise>
			</choose>
	</select>
	
	<!-- 保存数据到维护人员表 -->
	<insert id="saveEmpConfig" parameterType="pd">
		insert into 
		emp_config(EMP_CODE, SHOW_PAGE, IS_CHANGE, CREATE_USER, CREATE_TIME)
		values
		<foreach collection="empCodeArr" item="empCode" separator="," >
			(#{empCode}, '${showPage}', 'Y', '${createUser}', now())
		</foreach>
	</insert>
	
	<!-- 删除之前配置的维护人员 -->
	<update id="deleteEmpConfig" parameterType="pd">
		update emp_config 
		set IS_CHANGE = 'N',
		UPDATE_USER = #{createUser},
		UPDATE_TIME = now()
		where SHOW_PAGE= #{showPage}
	</update>
	
	<!-- 删除之前配置的维护人员 -->
	<update id="deleteEmpConfigById" parameterType="pd">
		update emp_config 
		set IS_CHANGE = 'N',
		UPDATE_USER = #{userName},
		UPDATE_TIME = now()
		where ID = #{id}
	</update>
	
	<!-- 查询保存的维护人员列表 -->
	<select id="empConfiglistPage" parameterType="page" resultType="pd">
		select c.ID, c.EMP_CODE, e.EMP_NAME, e.EMP_DEPARTMENT_NAME, c.SHOW_PAGE, c.IS_CHANGE, 
			c.CREATE_USER, DATE_FORMAT(c.CREATE_TIME, '%Y-%m-%d') CREATE_TIME, 
			c.UPDATE_USER, DATE_FORMAT(c.UPDATE_TIME, '%Y-%m-%d') UPDATE_TIME,
			(select NAME from sys_user where USERNAME=c.CREATE_USER) CREATE_USER_NAME
		from emp_config c
		left join bd_employee e on e.EMP_CODE = c.EMP_CODE
		where c.SHOW_PAGE = '${pd.showPage}' and c.IS_CHANGE = 'Y'
	</select>
	
	<!-- 查询员工的上级领导 -->
	<select id="findEmpLeaderByEmpId" parameterType="Integer" resultType="pd">
		select EMP_CODE, EMP_NAME, LEADER_EMPCODE, LEADER_EMPNAME
		from bd_employee
		where ID = #{empId}
	</select>
	
	<!-- 批量保存员工附加信息 -->
	<insert id="batchSaveEmpOtherInfo" parameterType="pd">
		insert into emp_add_info(EMP_NAME, CELL_PHONE, TEL_PHONE, NATIVE_PROVINCE, 
			NATIVE_CITY, NAME_SHORT, BANK_NAME, BANK_ACCOUNT)
		values
		<foreach collection="list" item="item" separator=",">
			(#{item.var0}, #{item.cellPhone}, #{item.telPhone}, #{item.var3},
				#{item.var4}, #{item.var5}, #{item.var6}, #{item.var7}
			)
		</foreach>
	</insert>
	
</mapper>